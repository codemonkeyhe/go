// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream_live_speedup.proto

/*
Package protocol_stream_manager is a generated protocol buffer package.

It is generated from these files:
	stream_live_speedup.proto

It has these top-level messages:
	StreamInfo
	ChannelStreamInfo
	AvpPayload
	LiveKey
	LiveInfo
	ChannelStreamsQueryReq
	ChannelStreamsQueryResp
*/
package protocol_stream_manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_kSuccess               ResultCode = 0
	ResultCode_kErrorServerBusy       ResultCode = 1
	ResultCode_kErrorInternal         ResultCode = 2
	ResultCode_kErrorRequestParam     ResultCode = 3
	ResultCode_kErrorPermissionDenied ResultCode = 4
	ResultCode_kErrorBusiness         ResultCode = 5
	ResultCode_kErrorWriteList        ResultCode = 6
)

var ResultCode_name = map[int32]string{
	0: "kSuccess",
	1: "kErrorServerBusy",
	2: "kErrorInternal",
	3: "kErrorRequestParam",
	4: "kErrorPermissionDenied",
	5: "kErrorBusiness",
	6: "kErrorWriteList",
}
var ResultCode_value = map[string]int32{
	"kSuccess":               0,
	"kErrorServerBusy":       1,
	"kErrorInternal":         2,
	"kErrorRequestParam":     3,
	"kErrorPermissionDenied": 4,
	"kErrorBusiness":         5,
	"kErrorWriteList":        6,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}
func (ResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 流信息
type StreamInfo struct {
	StreamName      string `protobuf:"bytes,1,opt,name=stream_name,json=streamName" json:"stream_name,omitempty"`
	Appid           uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Bid             uint32 `protobuf:"varint,3,opt,name=bid" json:"bid,omitempty"`
	Uid             int64  `protobuf:"varint,4,opt,name=uid" json:"uid,omitempty"`
	Cid             int64  `protobuf:"varint,5,opt,name=cid" json:"cid,omitempty"`
	Sid             int64  `protobuf:"varint,6,opt,name=sid" json:"sid,omitempty"`
	MicNo           uint32 `protobuf:"varint,7,opt,name=mic_no,json=micNo" json:"mic_no,omitempty"`
	Json            string `protobuf:"bytes,8,opt,name=json" json:"json,omitempty"`
	AudioVideoGroup uint32 `protobuf:"varint,9,opt,name=audio_video_group,json=audioVideoGroup" json:"audio_video_group,omitempty"`
	Metadata        string `protobuf:"bytes,10,opt,name=metadata" json:"metadata,omitempty"`
	StreamGroup     string `protobuf:"bytes,11,opt,name=stream_group,json=streamGroup" json:"stream_group,omitempty"`
	// enum STREAM_MIX {
	//  SM_INIT = 0; // 初始
	//  SM_RAW = 1; // 原画
	//  SM_RAW2 = 2; // 原画流，由于连麦，会出现多条记录
	//  SM_MIX = 3; // 混画
	//  SINGLE_MIX = 4; // 纯混（纯音频混或纯视频混）
	//  SM_TRANS_CODE = 5; // 转码
	// };
	Mix    uint32 `protobuf:"varint,12,opt,name=mix" json:"mix,omitempty"`
	Extend string `protobuf:"bytes,13,opt,name=extend" json:"extend,omitempty"`
	// enum STREAM_TYPE {
	//  ST_INIT = 0; // 初始
	//  ST_AUDIO = 1; // 音
	//  ST_VIDEO = 2; // 画
	//  ST_GROUP = 3; // 群组
	//  ST_BC_AUDIO = 4; // 暂不使用
	//  ST_BC_GROUP = 5; // 顶级频道广播
	// };
	Type        uint32 `protobuf:"varint,14,opt,name=type" json:"type,omitempty"`
	Ver         uint64 `protobuf:"varint,15,opt,name=ver" json:"ver,omitempty"`
	Gear        uint32 `protobuf:"varint,16,opt,name=gear" json:"gear,omitempty"`
	MixGroupNo  uint32 `protobuf:"varint,17,opt,name=mix_group_no,json=mixGroupNo" json:"mix_group_no,omitempty"`
	Rate        uint32 `protobuf:"varint,18,opt,name=rate" json:"rate,omitempty"`
	EncoderType uint32 `protobuf:"varint,19,opt,name=encoder_type,json=encoderType" json:"encoder_type,omitempty"`
}

func (m *StreamInfo) Reset()                    { *m = StreamInfo{} }
func (m *StreamInfo) String() string            { return proto.CompactTextString(m) }
func (*StreamInfo) ProtoMessage()               {}
func (*StreamInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StreamInfo) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

func (m *StreamInfo) GetAppid() uint32 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *StreamInfo) GetBid() uint32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *StreamInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *StreamInfo) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *StreamInfo) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *StreamInfo) GetMicNo() uint32 {
	if m != nil {
		return m.MicNo
	}
	return 0
}

func (m *StreamInfo) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

func (m *StreamInfo) GetAudioVideoGroup() uint32 {
	if m != nil {
		return m.AudioVideoGroup
	}
	return 0
}

func (m *StreamInfo) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *StreamInfo) GetStreamGroup() string {
	if m != nil {
		return m.StreamGroup
	}
	return ""
}

func (m *StreamInfo) GetMix() uint32 {
	if m != nil {
		return m.Mix
	}
	return 0
}

func (m *StreamInfo) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

func (m *StreamInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *StreamInfo) GetVer() uint64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *StreamInfo) GetGear() uint32 {
	if m != nil {
		return m.Gear
	}
	return 0
}

func (m *StreamInfo) GetMixGroupNo() uint32 {
	if m != nil {
		return m.MixGroupNo
	}
	return 0
}

func (m *StreamInfo) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *StreamInfo) GetEncoderType() uint32 {
	if m != nil {
		return m.EncoderType
	}
	return 0
}

type ChannelStreamInfo struct {
	Version uint64        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Streams []*StreamInfo `protobuf:"bytes,2,rep,name=streams" json:"streams,omitempty"`
}

func (m *ChannelStreamInfo) Reset()                    { *m = ChannelStreamInfo{} }
func (m *ChannelStreamInfo) String() string            { return proto.CompactTextString(m) }
func (*ChannelStreamInfo) ProtoMessage()               {}
func (*ChannelStreamInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChannelStreamInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChannelStreamInfo) GetStreams() []*StreamInfo {
	if m != nil {
		return m.Streams
	}
	return nil
}

// 透传秒开信息
type AvpPayload struct {
	// 下面信息媒体中心的返回结果，里面包含播放地址
	Addr        []byte   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	SslAddr     []byte   `protobuf:"bytes,2,opt,name=sslAddr,proto3" json:"sslAddr,omitempty"`
	CreateTime  uint32   `protobuf:"varint,3,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	ExpireTime  uint32   `protobuf:"varint,4,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	StreamNames []string `protobuf:"bytes,5,rep,name=stream_names,json=streamNames" json:"stream_names,omitempty"`
}

func (m *AvpPayload) Reset()                    { *m = AvpPayload{} }
func (m *AvpPayload) String() string            { return proto.CompactTextString(m) }
func (*AvpPayload) ProtoMessage()               {}
func (*AvpPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AvpPayload) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AvpPayload) GetSslAddr() []byte {
	if m != nil {
		return m.SslAddr
	}
	return nil
}

func (m *AvpPayload) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *AvpPayload) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *AvpPayload) GetStreamNames() []string {
	if m != nil {
		return m.StreamNames
	}
	return nil
}

type LiveKey struct {
	Appid uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Cid   int64  `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
	Sid   int64  `protobuf:"varint,3,opt,name=sid" json:"sid,omitempty"`
}

func (m *LiveKey) Reset()                    { *m = LiveKey{} }
func (m *LiveKey) String() string            { return proto.CompactTextString(m) }
func (*LiveKey) ProtoMessage()               {}
func (*LiveKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LiveKey) GetAppid() uint32 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *LiveKey) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *LiveKey) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

type LiveInfo struct {
	LiveKey           *LiveKey           `protobuf:"bytes,1,opt,name=live_key,json=liveKey" json:"live_key,omitempty"`
	ChannelStreamInfo *ChannelStreamInfo `protobuf:"bytes,2,opt,name=channel_stream_info,json=channelStreamInfo" json:"channel_stream_info,omitempty"`
	AvpPayload        *AvpPayload        `protobuf:"bytes,3,opt,name=avp_payload,json=avpPayload" json:"avp_payload,omitempty"`
}

func (m *LiveInfo) Reset()                    { *m = LiveInfo{} }
func (m *LiveInfo) String() string            { return proto.CompactTextString(m) }
func (*LiveInfo) ProtoMessage()               {}
func (*LiveInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LiveInfo) GetLiveKey() *LiveKey {
	if m != nil {
		return m.LiveKey
	}
	return nil
}

func (m *LiveInfo) GetChannelStreamInfo() *ChannelStreamInfo {
	if m != nil {
		return m.ChannelStreamInfo
	}
	return nil
}

func (m *LiveInfo) GetAvpPayload() *AvpPayload {
	if m != nil {
		return m.AvpPayload
	}
	return nil
}

// 频道流名称查询请求 (进频道获取,秒开)
type ChannelStreamsQueryReq struct {
	Sequence uint64     `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	LiveKeys []*LiveKey `protobuf:"bytes,2,rep,name=live_keys,json=liveKeys" json:"live_keys,omitempty"`
}

func (m *ChannelStreamsQueryReq) Reset()                    { *m = ChannelStreamsQueryReq{} }
func (m *ChannelStreamsQueryReq) String() string            { return proto.CompactTextString(m) }
func (*ChannelStreamsQueryReq) ProtoMessage()               {}
func (*ChannelStreamsQueryReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChannelStreamsQueryReq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ChannelStreamsQueryReq) GetLiveKeys() []*LiveKey {
	if m != nil {
		return m.LiveKeys
	}
	return nil
}

// 频道流名称查询结果
type ChannelStreamsQueryResp struct {
	ResCode   uint32      `protobuf:"varint,1,opt,name=res_code,json=resCode" json:"res_code,omitempty"`
	ResMsg    string      `protobuf:"bytes,2,opt,name=res_msg,json=resMsg" json:"res_msg,omitempty"`
	Sequence  uint64      `protobuf:"varint,3,opt,name=sequence" json:"sequence,omitempty"`
	LiveInfos []*LiveInfo `protobuf:"bytes,4,rep,name=live_infos,json=liveInfos" json:"live_infos,omitempty"`
}

func (m *ChannelStreamsQueryResp) Reset()                    { *m = ChannelStreamsQueryResp{} }
func (m *ChannelStreamsQueryResp) String() string            { return proto.CompactTextString(m) }
func (*ChannelStreamsQueryResp) ProtoMessage()               {}
func (*ChannelStreamsQueryResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ChannelStreamsQueryResp) GetResCode() uint32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *ChannelStreamsQueryResp) GetResMsg() string {
	if m != nil {
		return m.ResMsg
	}
	return ""
}

func (m *ChannelStreamsQueryResp) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ChannelStreamsQueryResp) GetLiveInfos() []*LiveInfo {
	if m != nil {
		return m.LiveInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamInfo)(nil), "protocol.stream_manager.StreamInfo")
	proto.RegisterType((*ChannelStreamInfo)(nil), "protocol.stream_manager.ChannelStreamInfo")
	proto.RegisterType((*AvpPayload)(nil), "protocol.stream_manager.AvpPayload")
	proto.RegisterType((*LiveKey)(nil), "protocol.stream_manager.LiveKey")
	proto.RegisterType((*LiveInfo)(nil), "protocol.stream_manager.LiveInfo")
	proto.RegisterType((*ChannelStreamsQueryReq)(nil), "protocol.stream_manager.ChannelStreamsQueryReq")
	proto.RegisterType((*ChannelStreamsQueryResp)(nil), "protocol.stream_manager.ChannelStreamsQueryResp")
	proto.RegisterEnum("protocol.stream_manager.ResultCode", ResultCode_name, ResultCode_value)
}

func init() { proto.RegisterFile("stream_live_speedup.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0x1b, 0x37,
	0x10, 0xed, 0x7a, 0x65, 0x49, 0x1e, 0x29, 0xf1, 0x9a, 0x4e, 0x6d, 0x26, 0x97, 0x2a, 0xea, 0x45,
	0xf0, 0xc1, 0x07, 0xf7, 0x58, 0x04, 0x68, 0xe2, 0x14, 0x45, 0xd0, 0x34, 0x70, 0xd7, 0x41, 0x0b,
	0xf4, 0xb2, 0x60, 0x96, 0x13, 0x95, 0xf5, 0x92, 0xdc, 0x90, 0xbb, 0x0b, 0xe9, 0x6b, 0x8a, 0x9e,
	0xfb, 0x4f, 0xbd, 0xf7, 0x2f, 0x0a, 0x0e, 0x57, 0x52, 0x9d, 0xd4, 0xee, 0x69, 0x87, 0x8f, 0xc3,
	0x99, 0x37, 0xf3, 0xde, 0xc2, 0x63, 0xdf, 0x38, 0x14, 0xba, 0xa8, 0x54, 0x87, 0x85, 0xaf, 0x11,
	0x65, 0x5b, 0x9f, 0xd7, 0xce, 0x36, 0x96, 0x9d, 0xd2, 0xa7, 0xb4, 0xd5, 0x79, 0x9f, 0xa3, 0x85,
	0x11, 0x4b, 0x74, 0xf3, 0xbf, 0x52, 0x80, 0x6b, 0x82, 0x5e, 0x99, 0xf7, 0x96, 0x7d, 0x01, 0x93,
	0x3e, 0xc1, 0x08, 0x8d, 0x3c, 0x99, 0x25, 0x8b, 0x83, 0x1c, 0x22, 0xf4, 0x46, 0x68, 0x64, 0x8f,
	0x60, 0x5f, 0xd4, 0xb5, 0x92, 0x7c, 0x6f, 0x96, 0x2c, 0x1e, 0xe4, 0xf1, 0xc0, 0x32, 0x48, 0xdf,
	0x29, 0xc9, 0x53, 0xc2, 0x42, 0x18, 0x90, 0x56, 0x49, 0x3e, 0x98, 0x25, 0x8b, 0x34, 0x0f, 0x61,
	0x40, 0x4a, 0x25, 0xf9, 0x7e, 0x44, 0xca, 0x88, 0x78, 0x25, 0xf9, 0x30, 0x22, 0x5e, 0x49, 0xf6,
	0x39, 0x0c, 0xb5, 0x2a, 0x0b, 0x63, 0xf9, 0x28, 0x96, 0xd7, 0xaa, 0x7c, 0x63, 0x19, 0x83, 0xc1,
	0x6f, 0xde, 0x1a, 0x3e, 0x26, 0x3a, 0x14, 0xb3, 0x33, 0x38, 0x12, 0xad, 0x54, 0xb6, 0xe8, 0x94,
	0x44, 0x5b, 0x2c, 0x9d, 0x6d, 0x6b, 0x7e, 0x40, 0xaf, 0x0e, 0xe9, 0xe2, 0xa7, 0x80, 0x7f, 0x17,
	0x60, 0xf6, 0x04, 0xc6, 0x1a, 0x1b, 0x21, 0x45, 0x23, 0x38, 0x50, 0x8d, 0xed, 0x99, 0x3d, 0x85,
	0x69, 0x3f, 0x71, 0x2c, 0x31, 0xa1, 0xfb, 0x7e, 0x0b, 0xf1, 0x79, 0x06, 0xa9, 0x56, 0x2b, 0x3e,
	0x8d, 0xd3, 0x69, 0xb5, 0x62, 0x27, 0x30, 0xc4, 0x55, 0x83, 0x46, 0xf2, 0x07, 0x94, 0xde, 0x9f,
	0x02, 0xd1, 0x66, 0x5d, 0x23, 0x7f, 0x48, 0xa9, 0x14, 0x87, 0xd7, 0x1d, 0x3a, 0x7e, 0x38, 0x4b,
	0x16, 0x83, 0x3c, 0x84, 0x21, 0x6b, 0x89, 0xc2, 0xf1, 0x2c, 0x66, 0x85, 0x98, 0xcd, 0x60, 0xaa,
	0xd5, 0x2a, 0x72, 0x08, 0xf3, 0x1f, 0xd1, 0x1d, 0x68, 0xb5, 0x22, 0x0e, 0x71, 0x09, 0x4e, 0x34,
	0xc8, 0x59, 0x7c, 0x15, 0xe2, 0x40, 0x1e, 0x4d, 0x69, 0x25, 0xba, 0x82, 0xfa, 0x1e, 0xd3, 0xdd,
	0xa4, 0xc7, 0xde, 0xae, 0x6b, 0x9c, 0x57, 0x70, 0x74, 0xf9, 0xab, 0x30, 0x06, 0xab, 0x7f, 0xc9,
	0xcc, 0x61, 0xd4, 0xa1, 0xf3, 0xca, 0x1a, 0x92, 0x78, 0x90, 0x6f, 0x8e, 0xec, 0x19, 0x8c, 0xe2,
	0xe8, 0x9e, 0xef, 0xcd, 0xd2, 0xc5, 0xe4, 0xe2, 0xcb, 0xf3, 0x3b, 0xac, 0x73, 0xbe, 0xab, 0x97,
	0x6f, 0xde, 0xcc, 0x7f, 0x4f, 0x00, 0x9e, 0x77, 0xf5, 0x95, 0x58, 0x57, 0x56, 0xd0, 0x3e, 0x84,
	0x94, 0x8e, 0x9a, 0x4c, 0x73, 0x8a, 0x43, 0x6f, 0xef, 0xab, 0xe7, 0x01, 0xde, 0x23, 0x78, 0x73,
	0x0c, 0xe6, 0x2b, 0x1d, 0x8a, 0x06, 0x8b, 0x46, 0x69, 0xec, 0xdd, 0x04, 0x11, 0x7a, 0xab, 0x34,
	0x86, 0x04, 0x5c, 0xd5, 0xca, 0xf5, 0x09, 0x83, 0x98, 0x10, 0x21, 0x4a, 0xd8, 0x89, 0x19, 0xec,
	0xeb, 0xf9, 0xfe, 0x2c, 0xdd, 0x89, 0x19, 0xfc, 0xeb, 0xe7, 0x97, 0x30, 0x7a, 0xad, 0x3a, 0xfc,
	0x1e, 0xd7, 0x3b, 0x2f, 0x27, 0x1f, 0x79, 0xb9, 0xec, 0xfd, 0x7d, 0xdb, 0xa7, 0xe9, 0xd6, 0xa7,
	0xf3, 0xbf, 0x13, 0x18, 0x87, 0x2a, 0xb4, 0xcc, 0xaf, 0x61, 0x4c, 0x7f, 0xdc, 0x0d, 0xae, 0xa9,
	0xd2, 0xe4, 0x62, 0x76, 0xe7, 0xce, 0xfa, 0xd6, 0xf9, 0xa8, 0xea, 0x39, 0xfc, 0x02, 0xc7, 0x65,
	0x94, 0xa7, 0xe8, 0x53, 0x95, 0x79, 0x6f, 0xa9, 0xfb, 0xe4, 0xe2, 0xec, 0xce, 0x3a, 0x9f, 0x48,
	0x9a, 0x1f, 0x95, 0x9f, 0xa8, 0xfc, 0x12, 0x26, 0xa2, 0xab, 0x8b, 0x3a, 0x8a, 0x41, 0xfc, 0xef,
	0xd3, 0x73, 0xa7, 0x5b, 0x0e, 0x62, 0x1b, 0xcf, 0x3d, 0x9c, 0xdc, 0xea, 0xe6, 0x7f, 0x6c, 0xd1,
	0xad, 0x73, 0xfc, 0x10, 0x7e, 0x2b, 0x8f, 0x1f, 0x5a, 0x34, 0x25, 0xf6, 0x36, 0xda, 0x9e, 0xd9,
	0x33, 0x38, 0xd8, 0x2c, 0x65, 0xe3, 0xa4, 0xff, 0xdf, 0xca, 0xb8, 0xdf, 0x8a, 0x9f, 0xff, 0x99,
	0xc0, 0xe9, 0x7f, 0x76, 0xf5, 0x35, 0x7b, 0x0c, 0x63, 0x87, 0xbe, 0x08, 0x16, 0xef, 0x95, 0x1b,
	0x39, 0xf4, 0x97, 0x56, 0x22, 0x3b, 0x85, 0x10, 0x16, 0xda, 0x2f, 0x69, 0x83, 0x07, 0xf9, 0xd0,
	0xa1, 0xff, 0xc1, 0x2f, 0x6f, 0x51, 0x4d, 0x3f, 0xa2, 0xfa, 0x0d, 0x00, 0x51, 0x0d, 0x8b, 0xf7,
	0x7c, 0x40, 0x5c, 0x9f, 0xde, 0xcb, 0x95, 0x16, 0x4e, 0xf3, 0x85, 0xc8, 0x9f, 0xfd, 0x91, 0x00,
	0xe4, 0xe8, 0xdb, 0xaa, 0x21, 0x16, 0x53, 0x18, 0xdf, 0x5c, 0xb7, 0x65, 0x89, 0xde, 0x67, 0x9f,
	0xb1, 0x47, 0x90, 0xdd, 0x7c, 0xeb, 0x9c, 0x75, 0xd7, 0xe8, 0x3a, 0x74, 0x2f, 0x5a, 0xbf, 0xce,
	0x12, 0xc6, 0xe0, 0x61, 0x44, 0x5f, 0x99, 0x06, 0x9d, 0x11, 0x55, 0xb6, 0xc7, 0x4e, 0x80, 0x45,
	0x2c, 0x0f, 0xd4, 0x7c, 0x73, 0x25, 0x9c, 0xd0, 0x59, 0xca, 0x9e, 0xc0, 0x49, 0xc4, 0xaf, 0xd0,
	0x69, 0xe5, 0xc3, 0x7f, 0xfa, 0x12, 0x8d, 0x42, 0x99, 0x0d, 0x76, 0x75, 0x5e, 0xb4, 0x5e, 0x99,
	0xd0, 0x71, 0x9f, 0x1d, 0xc3, 0x61, 0xc4, 0x7e, 0x76, 0xaa, 0xc1, 0xd7, 0xca, 0x37, 0xd9, 0xf0,
	0xdd, 0x90, 0x06, 0xfa, 0xea, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xdb, 0xd9, 0x4d, 0x25,
	0x06, 0x00, 0x00,
}
