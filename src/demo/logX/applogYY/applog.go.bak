package applog

import (
	"bytes"
	//	"log/syslog"
	"os"
	"path"

	"github.com/op/go-logging"
	//"yy.com/stream_manager/daemon/alarm"
)

type AppLogBackend struct {
	backend  logging.Backend
	formater logging.Formatter
}

func (this *AppLogBackend) Log(level logging.Level, calldepth int, rec *logging.Record) error {
	if level <= logging.ERROR {
		var buf bytes.Buffer
		this.formater.Format(calldepth+1, rec, &buf)
		//alarm.ErrorLog(buf.String())
	}
	return this.backend.Log(level, calldepth+1, rec)
}

func newApplogBackend(b logging.Backend) *AppLogBackend {
	f := logging.MustStringFormatter("%{shortfile} %{longfunc} %{message}")
	return &AppLogBackend{b, f}
}

func init() {
	process_name := path.Base(os.Args[0])
	//这样改造支持跨平台编译
	backend1, err := MyNewSyslogBackendPriority(process_name)
	if err == nil {
		format := logging.MustStringFormatter("%{color} %{module} %{shortfile} %{longfunc} %{color:reset} %{message}")
		backend1Formatter := newApplogBackend(logging.NewBackendFormatter(backend1, format))
		logging.SetBackend(backend1Formatter)

		log := MustGetLogger("applog")
		SetLogLevel("DEBUG")
		log.Info("syslog installed and %v start!", process_name)
	} else {
		panic(err)
	}
}
func SetLogLevel(logLevelStr string) error {
	var appLogLevel logging.Level
	if level, err := logging.LogLevel(logLevelStr); err != nil {
		appLogLevel = logging.DEBUG
	} else {
		appLogLevel = level
	}
	logging.SetLevel(appLogLevel, "")
	return nil
}

func MustGetLogger(module string) *logging.Logger {
	log := logging.MustGetLogger(module)
	return log
}
