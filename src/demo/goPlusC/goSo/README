正确做法
生成so文件
gcc  foo.c -fPIC -shared -o ./lib/libfoo.so
生成可执行文件
go build -o test


---------------------------------------------------
错误做法1
foo.c不能被命名为foo.cpp，否则错误，按照C++规则生成so库了
生成so文件
错误做法
gcc  foo.cpp -fPIC -shared -o ./lib/libfoo.so

gcc -fPIC -c foo.cpp
gcc -fPIC -shared -Wl,-soname,libfoo.so -o ./lib/libfoo.so foo.o

//gcc  main.cpp -L./lib/ -lfoo -o main -Wl,-rpath ./lib/
---------------------------------------------------
错误做法2
下面是用g++方式生成so以及可执行文件，这样的so是不能被go调用的，
http://blog.csdn.net/FreeApe/article/details/51927615
 之前说过golang调用C代码的方式可以通过cgo或者是swig，而cgo是不能使用C++相关的东西的，比如标准库或者C++的面向对象特性。
怎么办，将c++的功能函数封装成C接口，然后编译成动态库，或者是功能较为简单的可以直接嵌入到go源文件中。 

生成so文件
g++ -std=c++0x foo.cpp -fPIC -shared -o ./lib/libfoo.so
#这样不行，没有指定运行时的so
g++ -std=c++0x main.cpp -L./lib/ -lfoo -o main
#虽然指定了运行时的so，依然错误，用了g++
g++ -std=c++0x main.cpp -L./lib/ -lfoo -o main -Wl,-rpath ./lib/



