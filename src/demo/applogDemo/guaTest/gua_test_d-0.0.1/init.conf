<base_info>
port=""
author="dw_hehao1"
reqRpt="0"
ip_type=""
name="gua_test_d"
pname="gua_test_d"
auto_start="yes"
user="root"
app_name="gua_test_d"
version="0.0.3"

</base_info>
<post_install>
# 该处输入内容将保存为 /data/services/$PKG_NAME-$VERSION/admin/post-install.sh

# 注意！安装后脚本【固定】是使用 【root】 身份运行的 ！！！

# 这是因为大部分安装后操作需要 root 权限，例如创建目录，创建符号连接，安装 lib 库文件等。

# 如果你希望用其他身份运行，记得使用 su - <user> -c "<cmd>" 的方式 ！！！

# 如果 <cmd> 部分比较长，建议将 <cmd> 部分保存为一个脚本文件，放到打包的 bin/ 目录下，例如 test.sh

# 并使用诸如 su - <user> -c "bash $INSTALL_PATH/bin/test.sh" 方式调用 ！！！


cd $INSTALL_PATH

ln -s conf etc
</post_install>
<crontab>
# $INSTALL_PATH app monitor
*/3 * * * *  $INSTALL_PATH/admin/monitor.sh > $INSTALL_PATH/admin/monitor.log 2>&1 &
# $INSTALL_PATH resource report
*/2 * * * *  $INSTALL_PATH/admin/report.sh > $INSTALL_PATH/admin/report.log 2>&1 &
</crontab>
<start>
# ！！！请根据具体需要更改该脚本，此处只是默认脚本，非 100% 通用 ！！！！

# 该处输入内容将保存为 /data/services/$PKG_NAME-$VERSION/admin/start.sh

# 如果你是使用 root 用户启动，则无需使用 sudo ，脚本默认以 root 身份运行 ！！！！

# 如果你是使用 user_00 用户启动，请注意去掉 sudo ，否则可能导致脚本运行失败 ！！！！

# 升级时调用当前内容启动新进程

# ！！！注意！！！

# 由于系统自带 pidof 命令在 cron 中会随机 coredump ，这里的 pidof 是自定义函数，

# 仅支持 pidof <name> 的用法 ！！！！

# 最后修改日期 : 2013-05-24 16:40

#---------------#
# 进程数量设置  #
#---------------#

count=1

#----------------#
# 初始化日志文件 #
#----------------#

log=$INSTALL_PATH/admin/start.log

true > $log

#-------------#
# 进程数检查  #
#-------------#

x=$(pidof $APP_NAME |wc -w)
y=$((count-x))
echo "delta=$y"

#--------------------------#
# 进程数大于 $count 就退出 #
#--------------------------#

if [ $y -le 0 ] ; then
   pidof $APP_NAME | xargs -r ps -lf
   echo "$APP_NAME num ($x) >= $count , no need to start , quit"
   exit 0
fi

#---------------#
# 启动进程      #
#---------------#

cd $INSTALL_PATH/bin || exit 1
#args=`cat $INSTALL_PATH/conf/args.ini`
for ((i=1;i<=$y;i++)); do
     echo "start #$i"
     nohup ./$APP_NAME >>$log 2>&1 &
     #nohup ./$APP_NAME ${args} >>$log 2>&1 &
     sleep 2
done

#---------------#
# 二次确认      #
#---------------#

if [ $(pidof $APP_NAME |wc -w) -eq $count ] ; then
     echo "start $APP_NAME ok"
     echo "output last 20 lines of $log"
     tail -n 20 $log
     echo "output last 20 lines of /data/yy/log/$APP_NAME/${APP_NAME}.log"
     tail -n 20 /data/yy/log/$APP_NAME/${APP_NAME}.log
     pidof $APP_NAME |xargs -r ps -lf
     exit 0
else
     echo "start $APP_NAME failed"
     echo "output last 20 lines of $log"
     tail -n 20 $log
     echo "output last 20 lines of /data/yy/log/$APP_NAME/${APP_NAME}.log"
     tail -n 20 /data/yy/log/$APP_NAME/${APP_NAME}.log
     pidof $APP_NAME |xargs -r ps -lf
     exit 1
fi
</start>
<stop>
# ！！！请根据具体需要更改该脚本，此处只是默认脚本，非 100% 通用

# 该处输入内容将保存为 /data/services/$PKG_NAME-$VERSION/admin/stop.sh

# 如果你是使用 root 用户停止，则无需使用 sudo ，脚本默认以 root 身份运行 ！！！！

# 如果你是使用 user_00 用户停止，请注意去掉 sudo ，否则可能导致脚本运行失败 ！！！！

# 升级时调用当前内容停止旧进程

# ！！！注意！！！

# 由于系统自带 pidof 命令在 cron 中会随机 coredump ，这里的 pidof 是自定义函数，

# 仅支持 pidof <name> 的用法 ！！！！

#----------------#
# 初始化日志文件 #
#----------------#

log=$INSTALL_PATH/admin/stop.log

true > $log

#---------------#
# 进程数量检查  #
#---------------#

pid=$(pidof $APP_NAME)

if [ -z "$pid" ] ; then
    echo "no running $APP_NAME found , already stopped"
    exit 0
fi

#---------------#
# 停止进程      #
#---------------#

for i in $pid ; do
     echo "kill $APP_NAME pid=$i [$(ps --no-headers -lf $i)]"
     kill $i
     [ $? -eq 0 ] && ( bash /data/pkg/public-scripts/func/common-cleanup.sh $i ) &
     sleep 5
done

#---------------#
# 二次确认       #
#---------------#

if [ -z "$(pidof $APP_NAME)" ] ; then
     echo "stop $APP_NAME ok, all $APP_NAME got killed"
     echo "output last 20 lines of $log"
     tail -n 20 $log
     exit 0
else 
     echo "stop $APP_NAME failed, found $APP_NAME still running . see following"
     pidof $APP_NAME | xargs -r ps -lf
     echo "output last 20 lines of $log"
     tail -n 20 $log
     exit 1
fi
</stop>
<restart>
# ！！！请根据具体需要更改该脚本，此处只是默认脚本，非 100% 通用

# 该处输入内容将保存为 /data/services/$PKG_NAME-$VERSION/admin/restart.sh

# 如果你是使用 root 用户重启，则无需使用 sudo ，脚本默认以 root 身份运行 ！！！！

# 如果你是使用 user_00 用户重启，请注意去掉 sudo ，否则可能导致脚本运行失败 ！！！！

# ！！！注意！！！

# 由于系统自带 pidof 命令在 cron 中会随机 coredump ，这里的 pidof 是自定义函数，

# 仅支持 pidof <name> 的用法 ！！！！

#---------------#
# 先停进程      #   
#---------------#
bash $INSTALL_PATH/admin/stop.sh  || exit 1

sleep 5

#---------------#
# 再起进程      #   
#---------------#

bash $INSTALL_PATH/admin/start.sh || exit 1
</restart>
<monitor>
# ！！！请根据具体需要更改该脚本，此处只是默认脚本，非 100% 通用

# 该处输入内容将保存为 /data/services/$PKG_NAME-$VERSION/admin/monitor.sh

# ！！！注意！！！

# 由于系统自带 pidof 命令在 cron 中会随机 coredump ，这里的 pidof 是自定义函数，

# 仅支持 pidof <name> 的用法 ！！！！

#---------------#
# 进程数量设置  #
#---------------#

count=1

#----------------#
# 初始化日志文件 #
#----------------#

log=$INSTALL_PATH/admin/core.log

#---------------#
# 进程数量判断  #
#---------------#

pids=$(pidof $APP_NAME)

num=$(echo $pids |wc -w)

if [ $num -lt $count ] ; then

      # 进程数量异常，执行异常处理

      echo "$(date +'%F %T')| $APP_NAME num = $num [< $count] , pid=[$pids]" >> $log

      ps -lf $pids
  
      bash $INSTALL_PATH/admin/resolve.sh
  
      exit $?
else

      # 进程数量正常

      echo "current num of $APP_NAME = $num , pid=[$pids]"

      ps -lf $pids

      exit 0
fi
</monitor>
<resolve>
# ！！！请根据具体需要更改该脚本，此处只是默认脚本，非 100% 通用

# 该处输入内容将保存为 /data/services/$PKG_NAME-$VERSION/admin/resolve.sh

# ！！！注意！！！

# 由于系统自带 pidof 命令在 cron 中会随机 coredump ，这里的 pidof 是自定义函数，

# 仅支持 pidof <name> 的用法 ！！！！

#----------------#
# 初始化日志文件 #
#----------------#

log=$INSTALL_PATH/admin/resolve.log

true > $log

#--------------#
# 执行启动脚本 #
#--------------#

bash $INSTALL_PATH/admin/start.sh &>$log
</resolve>
<md5>
bin/*
sbin/*
lib/*
init.conf
</md5>
<clear_file>
# <dir> <size> <method> <days>
#log/  5000M  tar      7
#log/  8000M  delete   10
</clear_file>
